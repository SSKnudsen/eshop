// <auto-generated />
using System;
using Datalayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Datalayer.Migrations
{
    [DbContext(typeof(EfstoreContext))]
    partial class EfstoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebstoreConsole.Datalayer.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.Property<DateTime>("dateoforder");

                    b.Property<string>("status");

                    b.HasKey("OrderId")
                        .HasName("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebstoreConsole.Entities.Productinfo", b =>
                {
                    b.Property<int>("productinfoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.Property<string>("Color");

                    b.Property<string>("size");

                    b.HasKey("productinfoID")
                        .HasName("productinfoID");

                    b.ToTable("Prodinfo");

                    b.HasData(
                        new
                        {
                            productinfoID = 1,
                            Brand = " Adiddas",
                            Color = "Black",
                            size = "10"
                        },
                        new
                        {
                            productinfoID = 2,
                            Brand = "Adiddas",
                            Color = "White",
                            size = "11"
                        },
                        new
                        {
                            productinfoID = 3,
                            Brand = "Ecco",
                            Color = "Brown",
                            size = "12"
                        },
                        new
                        {
                            productinfoID = 4,
                            Brand = "Adiddas",
                            Color = "Black",
                            size = "10"
                        });
                });

            modelBuilder.Entity("WebstoreConsole.Entities.Products", b =>
                {
                    b.Property<int>("ClothingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("name");

                    b.Property<int>("price");

                    b.Property<string>("status");

                    b.HasKey("ClothingID")
                        .HasName("ClothingID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ClothingID = 1,
                            Description = "Running Shoe with special Gel",
                            name = "Adiddas A1 Running",
                            price = 300,
                            status = "Instock"
                        },
                        new
                        {
                            ClothingID = 2,
                            Description = "Leather shoe with antistatic know ",
                            name = "Ecco Leather Shoe",
                            price = 800,
                            status = "Instock"
                        },
                        new
                        {
                            ClothingID = 3,
                            Description = "Running Shoe with special Gel and antiShock Absorber",
                            name = "Adiddas A2 Running",
                            price = 1000,
                            status = "NotInstock"
                        },
                        new
                        {
                            ClothingID = 4,
                            Description = "Running Shoe with special Gel",
                            name = "Asics - new Sensation",
                            price = 2000,
                            status = "Instock"
                        });
                });

            modelBuilder.Entity("WebstoreConsole.Entities.Shopbasket", b =>
                {
                    b.Property<int>("Checkout_id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClothingID");

                    b.Property<string>("Name");

                    b.Property<string>("OrderLines");

                    b.Property<int>("Product_id");

                    b.Property<int>("Quantity");

                    b.HasKey("Checkout_id")
                        .HasName("Checkout_id");

                    b.ToTable("shopbaskets");
                });

            modelBuilder.Entity("WebstoreConsole.Entities.userinformation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CountryCode");

                    b.Property<string>("city");

                    b.Property<DateTime>("dateofbirth");

                    b.Property<string>("email");

                    b.Property<string>("fullname");

                    b.Property<string>("gender");

                    b.Property<string>("paymentO");

                    b.HasKey("id")
                        .HasName("id");

                    b.ToTable("userinformation");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Address = "petersvej 1",
                            CountryCode = 7600,
                            city = "petersborg",
                            dateofbirth = new DateTime(2019, 4, 4, 8, 47, 20, 506, DateTimeKind.Local).AddTicks(9948),
                            email = "Peter@gmail.com",
                            fullname = "peter petersen",
                            paymentO = "MasterCard"
                        },
                        new
                        {
                            id = 2,
                            Address = "AndersVej  1",
                            CountryCode = 7600,
                            city = "Andersborg",
                            dateofbirth = new DateTime(2019, 4, 4, 8, 47, 20, 508, DateTimeKind.Local).AddTicks(9932),
                            email = "anders@gmail.com",
                            fullname = "Anders Andersen",
                            paymentO = "MasterCard"
                        },
                        new
                        {
                            id = 3,
                            Address = "kathrinevej  1",
                            CountryCode = 7600,
                            city = "kathrinebjerg",
                            dateofbirth = new DateTime(2019, 4, 4, 8, 47, 20, 509, DateTimeKind.Local).AddTicks(9921),
                            email = "Kathrine@gmail.com",
                            fullname = "Kathrine Kristiansen",
                            paymentO = "MasterCard"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
